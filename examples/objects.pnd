(define (complex real imag)
  (lambda (msg . args)
    (cond ((= msg 'real') real)
          ((= msg 'imag') imag)
    
          ((= msg 'setReal') (set! real (car args)))
          ((= msg 'setImag') (set! imag (car args)))

          ((= msg 'str') (+ 'real=' (str real) ' imag=' (str imag)))
          
          ((= msg '+') (let ((x (car args)))
                            (complex (+ real (x 'real'))
                                     (+ imag (x 'imag'))))))))

(define x (complex 3 4))
(define y (complex 5 6))

(print 'x ' (x 'str'))
(print 'y ' (y 'str'))

(x 'setReal' 44)
(x 'setImag' 55)
(y 'setReal' 88)
(y 'setImag' 99)

(print 'x ' (x 'str'))
(print 'y ' (y 'str'))

(print 'sum ' ((x '+' y) 'str'))
